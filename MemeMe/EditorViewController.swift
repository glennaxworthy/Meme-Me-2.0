//
//  EditViewController.swift
//  MemeMe
//
//  Created by Glenn Axworthy on 12/11/15.
//  Copyright Â© 2015 Glenn Axworthy. All rights reserved.
//

import UIKit

class EditorViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate, UITextFieldDelegate {

    var imagePicker: UIImagePickerController! = nil
    var memeIsEditing = false // meme data is being editied
    var memeIsModified = false // meme data has been modified
    var memeToEdit: Int? = nil // create if nil, else edit

    @IBOutlet weak var actionButton: UIBarButtonItem!
    @IBOutlet weak var albumButton: UIBarButtonItem!
    @IBOutlet weak var cameraButton: UIBarButtonItem!
    @IBOutlet weak var cancelButton: UIBarButtonItem!
    @IBOutlet weak var captionBottom: UITextField!
    @IBOutlet weak var captionTop: UITextField!
    @IBOutlet weak var doneButton: UIBarButtonItem!
    @IBOutlet weak var imageView: UIImageView!
    @IBOutlet weak var memeView: UIView!
    @IBOutlet weak var navigationBar: UINavigationBar!

    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        setupEditor() // see setupEditor() notes
    }

    override func viewDidLoad() {
        super.viewDidLoad()

        // create empty meme
        captionTop.text = "TOP"
        captionTop.clearsOnBeginEditing = true
        captionBottom.text = "BOTTOM"
        captionBottom.clearsOnBeginEditing = true
        setupCaption(captionTop)
        setupCaption(captionBottom)

        navigationBar.topItem!.title = "Create"
        imagePicker = UIImagePickerController()
        imagePicker.delegate = self
    }

    override func viewWillAppear(animated: Bool) {
        super.viewWillAppear(animated)
        setupButtons()

        // subscribe to keyboard show/hide notifications
        let center = NSNotificationCenter.defaultCenter()
        center.addObserver(self, selector: "keyboardWillHide:", name: UIKeyboardWillHideNotification, object: nil)
        center.addObserver(self, selector: "keyboardWillShow:", name: UIKeyboardWillShowNotification, object: nil)
    }

    override func viewWillDisappear(animated: Bool) {
        super.viewWillDisappear(animated)
        
        // unsubscribe from keyboard show/hide notifications
        let center = NSNotificationCenter.defaultCenter()
        center.removeObserver(self, name: UIKeyboardWillShowNotification, object: nil)
        center.removeObserver(self, name: UIKeyboardWillHideNotification, object: nil)
    }
    
    func composeMemeImage() -> UIImage {
        resignEditing() // prevent cursor in meme image

        UIGraphicsBeginImageContext(memeView.bounds.size)
        memeView.drawViewHierarchyInRect(memeView.bounds, afterScreenUpdates: true)
        let memeImage = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return memeImage
    }

    func keyboardWillHide(notification: NSNotification) {
        view.frame.origin.y = 0
    }

    func keyboardWillShow(notification: NSNotification) {
        if captionBottom.editing {
            // slide view up to edit bottom caption
            let userInfo = notification.userInfo!
            let stopFrame = userInfo[UIKeyboardFrameEndUserInfoKey]?.CGRectValue
            view.frame.origin.y -= stopFrame!.size.height // works ONLY for root!
        }
    }

    override func prefersStatusBarHidden() -> Bool {
        return true
    }

    func resignEditing() {
        captionTop.resignFirstResponder()
        captionBottom.resignFirstResponder()
    }

    func setupButtons() {
        actionButton.enabled = imageView.image != nil
        albumButton.enabled = true // always enabled
        cameraButton.enabled = UIImagePickerController.isSourceTypeAvailable(.Camera)
        cancelButton.enabled = true // always enabled

        // hide/show done button
        let show = memeIsModified && imageView.image != nil
        doneButton!.tintColor = show ? view.tintColor : UIColor.clearColor()
        doneButton!.enabled = show
    }
    
    func setupCaption(caption: UITextField) {
        caption.delegate = self
        caption.defaultTextAttributes = [
            NSFontAttributeName : UIFont(name: "Verdana-Bold", size: 36)!,
            NSForegroundColorAttributeName : UIColor.whiteColor(),
            NSStrokeColorAttributeName : UIColor.blackColor(),
            NSStrokeWidthAttributeName : -5]
        
        caption.textAlignment = .Center // IB setting is ignored
    }
    
    func setupEditor() {

        /*
            Setting imageView.image at any time up to and including viewWillAppear() results
            in the loss of the toolbar. Auto-layout constraints are generated by IB and easy
            to understand. Tinkering does no good. This is a simple scene! Why the toolbar?
        */

        if memeToEdit != nil && !memeIsEditing {
            // setup editor with meme data ONCE
            let memeData = MemeData.array[memeToEdit!]
            captionTop.text = memeData.top
            captionTop.clearsOnBeginEditing = false
            captionBottom.text = memeData.bottom
            captionBottom.clearsOnBeginEditing = false
            imageView.image = memeData.image // affects layout
            memeIsEditing = true
            
            navigationBar.topItem!.title = "Edit"
        }
    }

    @IBAction func touchedActionButton(sender: UIBarButtonItem) {
        resignEditing()

        let memeImage = composeMemeImage()
        let activityController = UIActivityViewController(activityItems: [memeImage], applicationActivities: nil)
        presentViewController(activityController, animated: true, completion: nil)
    }

    @IBAction func touchedAlbumButton(sender: UIBarButtonItem) {
        resignEditing()

        imagePicker.sourceType = .PhotoLibrary
        presentViewController(imagePicker, animated: true, completion: nil)
    }

    @IBAction func touchedCameraButton(sender: UIBarButtonItem) {
        resignEditing()

        imagePicker.sourceType = .Camera // throws if camera not available
        presentViewController(imagePicker, animated: true, completion: nil)
    }

    @IBAction func touchedCancelButton(sender: UIBarButtonItem) {
        dismissViewControllerAnimated(true, completion: nil)
    }

    @IBAction func touchedDoneButton(sender: UIBarButtonItem) {
        let memeImage = composeMemeImage()
        let memeData = MemeData(meme: memeImage, image: imageView.image!, top: captionTop.text!, bottom: captionBottom.text!)
        if memeToEdit != nil {
            // copy editor data back to meme
            MemeData.array[memeToEdit!] = memeData
        } else {
            // add editor data to array of existing memes
            MemeData.array.append(memeData)
        }

        dismissViewControllerAnimated(true, completion: nil)
    }
    
    // UIImagePickerControllerDelegate
    
    func imagePickerControllerDidCancel(picker: UIImagePickerController) {
        dismissViewControllerAnimated(true, completion: nil)
    }
    
    func imagePickerController(picker: UIImagePickerController, didFinishPickingImage image: UIImage, editingInfo: [String : AnyObject]?) {
        imageView.image = image // no layout problem here
        memeIsModified = true
        setupButtons()
        dismissViewControllerAnimated(true, completion: nil)
    }

    // UITextFieldDelegate

    func textFieldDidEndEditing(textField: UITextField) {
        setupCaption(textField) // re-apply lost attributes
        textField.clearsOnBeginEditing = false
        memeIsModified = true
        setupButtons()
    }

    func textFieldShouldReturn(textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true // leave text as is
    }
}
